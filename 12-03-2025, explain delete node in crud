/**
 * QUEUE - LILO/FIFO
 *
 * CRUD:
 * - Create
 *  - Insertion: Somewhere in between nodes iin a linkedlist
 *  - Append : Adds at the end of the linkedlist
 * - Read
 *  - Traversal : Read the linkedlist from the start to end
 *  - Searching : Which checks the value based on parameters if they matched
 * - Update
 * - Delete
 *  - Head
 *  - Tail
 *  - Between
 *
 * Markers:
 * - Head : Indicates the first data in the linkedlist
 * - Tail : Indicates the last data in the linkedlist
 * - Curr : Indicates the current data in the linkedlist
 * - PrevCurr : Indicates the previous data of the current data in the
 * linkedlist
 * - Temp : Indicates the temporary data in the linkedlist
 */

#include <array>
#include <iostream>
#include <string>

using namespace std;

struct ItemData {
    int id = 0, quantity = 0;
    string name = "", description = "";
    double price = 0.0;
};

struct ItemNode {
    // address/pointer member
    ItemNode* next = nullptr;

    // data/information member
    ItemData data;
};

/**
 * @brief Prompts the user with a specified instruction and captures their
 * input.
 *
 * This function displays a prompt message (instruction) to the user and then
 * reads the user's input from standard input, storing it into the provided data
 * variable.
 *
 * @param instruction A string containing the message or prompt to display.
 * @param data A reference to a string where the user's input will be stored.
 */
void InputInstruction(string instruction, string& data);
void InputInstruction(string instruction, double& data);
void InputInstruction(string instruction, int& data);

/**
 * @brief Displays the main menu options and captures the user's selection.
 *
 * This function prints an array of menu options to the console and prompts the
 * user to choose one of the available options. The selected option is then
 * stored in the provided reference variable.
 *
 * @param INSTRUCTIONS A constant array of strings representing the available
 * menu options.
 * @param MAX The total number of menu options provided in the INSTRUCTIONS
 * array.
 * @param choice A reference to an integer where the user's menu selection will
 * be stored.
 */
void MainMenu(const string INSTRUCTIONS[], const int MAX, int& choice);

/**
 * @brief Creates a new node for the linked list and updates the head, tail, and
 * counter.
 *
 * This function dynamically allocates a new Node, prompts the user for input to
 * populate the node's data, and appends the node to the linked list. If the
 * list is initially empty, the new node becomes both the head and tail of the
 * list. The node counter is also incremented.
 *
 * @param head A reference to a pointer to the head node of the linked list.
 * @param tail A reference to a pointer to the tail node of the linked list.
 * @param counter A reference to an integer that tracks the total number of
 * nodes in the list.
 */
void CreateNode(ItemNode*& head, ItemNode*& tail, int& counter);

/**
 * @brief Reads and displays the entire linked list.
 *
 * This function traverses the linked list starting from the head node and
 * prints out the data stored in each node. It provides an overview of all items
 * in the list for the user.
 *
 * @param head A pointer to the head node of the linked list.
 */
void ReadList(ItemNode* head);

/**
 * @brief Searches for a specific node within the linked list.
 *
 * This function iterates through the linked list, starting from the head node,
 * to locate a node that meets a particular search criterion (to be defined by
 * the application's requirements). Once found, the node's details can be
 * displayed or further processed.
 *
 * @param head A pointer to the head node of the linked list.
 */
void SearchNode(ItemNode* head);

/**
 * @brief Traverses the linked list and performs a defined action on each node.
 *
 * This function iterates through each node in the linked list starting from the
 * head, applying any specified operation (e.g., printing node data, updating
 * values). It serves as a helper function for systematic processing of all
 * nodes in the list.
 *
 * @param head A pointer to the head node of the linked list.
 */
void TraverseList(ItemNode* head);

/**
 * @brief Update list by inserting new node a head of one value of the stack.
 *
 * This function iterates through each nodes in linked list displaying available
 * nodes to insert the new value. It can accept new value to be stored in newly
 * created node.
 *
 * @param head A pointer to the head node of the linked list.
 * @param counter A variable that is used to set ID.
 */
void UpdateList(int& counter, ItemNode*& head);

void DeleteNode(ItemNode*& tail, ItemNode*& head);

int main() {
    const string INSTRUCTIONS[] = { "Create", "Read", "Update", "Delete"};
    const int MAX = end(INSTRUCTIONS) - begin(INSTRUCTIONS);

    int choice, counter = 0;
    ItemNode* head = nullptr, * tail = nullptr;

    do {
        MainMenu(INSTRUCTIONS, MAX, choice);

        switch (choice) {
        case 1:
            CreateNode(head, tail, counter);
            break;
        case 2:
            ReadList(head);
            break;
        case 3:
            UpdateList(counter, head);
            break;
        case 4:
            DeleteNode(tail, head);
            break;
        case 0:
            exit(0);

        default:
            break;
        }
    } while (true);

    system("pause");
    return 0;
}

void InputInstruction(string instruction, string& data) {
    cout << instruction << endl;
    getline(cin, data);
}

void InputInstruction(string instruction, double& data) {
    cout << instruction << endl;
    cin >> data;
}

void InputInstruction(string instruction, int& data) {
    cout << instruction << endl;
    cin >> data;
}

void MainMenu(const string INSTRUCTIONS[], const int MAX, int& choice) {
    cout << "Main Menu of Linked List: \n\n";
    if (MAX > 0) {
        for (int i = 0; i < MAX; i++) {
            cout << i + 1 << ": " << INSTRUCTIONS[i] << endl;
        }
        cout << "0. Exit\n";
        cout << ":: ";
        cin >> choice;
    }
    else {
        cout << "No Functions yet are available.\n\n\n";
    }
    system("cls");
}

void CreateNode(ItemNode*& head, ItemNode*& tail, int& counter) {
    ItemNode* temp = new ItemNode;

    cout << "Add new Item: \n";
    cin.ignore();
    InputInstruction("Item Name: ", temp->data.name);
    InputInstruction("Item Price: ", temp->data.price);
    InputInstruction("Item Quantity: ", temp->data.quantity);
    cin.ignore();
    InputInstruction("Item Description: ", temp->data.description);
    temp->data.id = counter;

    system("cls");

    if (head) {
        tail->next = temp;
        tail = temp;

        cout << "Added New Item\n\n\n";
    }
    else {
        head = temp;
        tail = temp;

        cout << "Created Linked List and Added New Item\n\n\n";
    }

    counter++;
}

void ReadList(ItemNode* head) {
    if (head) {
        int choice;
        do {
            cout << "List of Items:\n";
            TraverseList(head);
            cout << "----------\n"
                << "1. Check Full Details\n"
                << "0. exit\n"
                << ":: ";
            cin >> choice;

            system("cls");

            switch (choice) {
            case 1:
                SearchNode(head);
                break;
            case 0:
                return;
            default:
                cout << "Select only from options.\n";
                system("pause");
                system("cls");
                continue;
            }
        } while (true);
    }
    else {
        cout << "There is no item list yet\n\n";
        system("pause");
        system("cls");
    }
}

void SearchNode(ItemNode* head) {
    ItemNode* curr = head;
    int WhatToFind;

    TraverseList(head);
    cout << "ID to check full details: ";
    cin >> WhatToFind;

    system("cls");

    while (curr) {
        if (curr->data.id == WhatToFind) {
            cout << curr->data.id << ". " << curr->data.name
                << " | Price: " << curr->data.price
                << " | Quantity: " << curr->data.quantity << endl
                << "Description:\n"
                << "\t " << curr->data.description << "\n\n";
            system("pause");
            system("cls");
            return;
        }

        curr = curr->next;
    }

    system("cls");
}

void TraverseList(ItemNode* head) {
    ItemNode* curr = head;
    int counter = 1;

    while (curr) {
        cout << counter << ". " << curr->data.name << " | ID: " << curr->data.id
            << " | Price: " << curr->data.price << endl;

        curr = curr->next;
        counter++;
    }
}

void UpdateList(int& counter, ItemNode*& head) {
    ItemNode* temp = new ItemNode;
    ItemNode* currTemp = nullptr, * prevTemp = nullptr;
    int wta;

    // Check kung may laman ang linked list
    if (head == nullptr) { // if (!head)
        cout << "There is no list yet\n\n";

        system("pause");
        system("cls");
    }

    // display ang list
    TraverseList(head);
    // set kung saan isisingit
    cout << "Where to Add the New Node ID: ";
    cin >> wta;

    cout << "Add new Item: \n";
    cin.ignore();
    cout << "Item Name: " << endl;
    cin >> temp->data.name;
    cout << "Item Price: " << endl;
    cin >> temp->data.price;
    cout << "Item Quantity: " << endl;
    cin >> temp->data.quantity;
    cout << "Item Description: " << endl;
    cin >> temp->data.description;
    temp->data.id = counter;

    // i set as currTemp si head
    currTemp = head;

    do {
        // if magmamatch ang wta at ang currTemp
        if (wta == currTemp->data.id) {
            if (currTemp == head) {
                temp->next = head;
                head = temp;
            }
            else {
                temp->next = prevTemp->next; // temp->next = currTemp;
                prevTemp->next = temp;
            }
            break;
        }
        else {
            // set si currTemp na prevTemp
            prevTemp = currTemp;
            // set si next ng currTemp para maging bagong currTemp
            currTemp = currTemp->next;
        }
    } while (currTemp != nullptr);
}





// Function to delete a node from a linked list based on the provided item ID

//delete function
void DeleteNode(ItemNode*& tail, ItemNode*& head)
{


    //intiializes it to 0, this will be the place where the user inputs the id
    //of the item that the user wants to delete
    int wtf = 0;

    //initializes the code, makes it null to prevent error
    ItemNode* curr = nullptr, *prevCurr = nullptr;

    //sets the counter to 1
    int counter = 1;

    // Check if the list is empty (head is null)
    // if empty, state that its empty
    //else, move to next
    if (head == nullptr)
    {
        cout << "There is no item on storage!\n\n";  // Inform the user that the list is empty
        system("pause");  // Pause to let the user see the message
        system("cls");    // Clear the console screen
        return;  // Exit the function as there are no items to delete
    }



    // Set the current pointer to the head of the list to start traversing

    //makes current head, so we can start traversing from current (head)
    curr = head;

    // Print the list of items (nodes) with their information (name, ID, price)
    //show the list/items
    // has name, id, and price
    //only use name, and id
    //ex 0 a, 1 b, 2 c, etc...
    while (curr) {
        cout << counter << ". " << curr->data.name << " | ID: " << curr->data.id
            << " | Price: " << curr->data.price << endl;

        curr = curr->next;  // Move to the next node in the list
        counter++;  // Increment the counter to number the items
    }

    // Prompt the user to input the ID of the item they wish to delete
    cout << "Input ID to delete: ";
    cin >> wtf;  // Read the user input (the ID of the item to delete)

    // Start traversing the list again to find the node with the given ID
    curr = head;


    do {
        // Check if the current node has the matching ID
        //ikaw ba si, doberman
        if (curr->data.id == wtf) {


            // Case 1: If the node to delete is the head of the list
            //if head, do this
            if (curr == head) {
                head = head->next;  // Move the head pointer to the next node
                delete curr;  // Delete the old head node
            }

            // Case 2: If the node to delete is the tail of the list
            //if tail, do this
            else if (curr == tail) {
                tail = prevCurr;  // Move the tail pointer to the previous node
                prevCurr->next = nullptr;  // Set the next pointer of the previous node to null (end of list)
                delete curr;  // Delete the old tail node
            }

            // Case 3: If the node to delete is in the middle of the list
            //middle
            else {
                prevCurr->next = curr->next;  // Bypass the current node and link the previous node to the next node
                delete curr;  // Delete the current node
            }

            return;  // Exit the function after deleting the node
        }
        else {
            // Move to the next node in the list
            prevCurr = curr;
            curr = curr->next;
        }
    } while (curr != nullptr);  // Continue the loop until the end of the list
}


