// Function to delete a node from a linked list based on the provided item ID
void DeleteNode(ItemNode*& tail, ItemNode*& head)
{
    // Initializes the variable to store the ID of the item to delete (the user input)
    int wtf = 0;

    // Initializes pointers to traverse the list; curr for the current node, prevCurr for the previous node
    ItemNode* curr = nullptr, *prevCurr = nullptr;

    // Sets the counter to 1 for displaying item numbers when showing the list
    int counter = 1;

    // Check if the list is empty (head is nullptr)
    if (head == nullptr)
    {
        // If the list is empty, inform the user and exit the function
        cout << "There is no item on storage!\n\n";  
        system("pause");  // Pause the system to let the user read the message
        system("cls");    // Clear the console screen for a clean exit
        return;  // Exit the function early since there are no items to delete
    }

    // Set the current pointer to the head of the list to start traversing
    curr = head;

    // Traverse the list and display each item (name, ID, price)
    while (curr) {
        // Display the counter, name, ID, and price of each item
        cout << counter << ". " << curr->data.name << " | ID: " << curr->data.id
             << " | Price: " << curr->data.price << endl;

        // Move to the next node in the list
        curr = curr->next;  
        // Increment the counter to number the items displayed
        counter++;  
    }

    // Prompt the user to input the ID of the item they wish to delete
    cout << "Input ID to delete: ";
    // Capture the user's input (the ID of the item to delete)
    cin >> wtf;

    // Start traversing the list again from the head to find the node with the matching ID
    curr = head;

    // Traverse the list using a do-while loop
    do {
        // Check if the current node matches the provided ID
        if (curr->data.id == wtf) {

            // Case 1: If the node to delete is the head of the list
            if (curr == head) {
                // Move the head pointer to the next node (i.e., the new head of the list)
                head = head->next;  
                // Delete the old head node
                delete curr;  
            }

            // Case 2: If the node to delete is the tail of the list
            else if (curr == tail) {
                // Move the tail pointer to the previous node
                tail = prevCurr;  
                // Set the next pointer of the previous node to nullptr (indicating end of the list)
                prevCurr->next = nullptr;  
                // Delete the old tail node
                delete curr;  
            }

            // Case 3: If the node to delete is somewhere in the middle of the list
            else {
                // Bypass the current node by linking the previous node to the next node
                prevCurr->next = curr->next;  
                // Delete the current node
                delete curr;  
            }

            // Exit the function after deleting the node
            return;  
        }
        else {
            // If current node does not match, move to the next node in the list
            prevCurr = curr;  // Save the current node as previous node
            curr = curr->next;  // Move the current node pointer to the next node
        }
    } while (curr != nullptr);  // Continue traversing the list until the end
}
